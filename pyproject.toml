[project]
name = "immoassist-agent"
version = "1.0.0"
description = "AI agent for German real estate investment consulting with multi-agent architecture"
authors = [{ name = "ImmoAssist Development Team", email = "dev@immoassist.de" }]
license = { text = "Apache-2.0" }
readme = "README.md"
keywords = ["real-estate", "ai-agent", "google-adk", "vertex-ai", "investment-consulting"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Financial :: Investment",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.11"

# Core dependencies for production deployment
dependencies = [
    "google-adk>=1.5.0",
    "google-cloud-aiplatform[adk]>=1.93.0",
    "google-genai>=1.9.0",
    "vertexai>=1.93.0",
    "google-auth>=2.20.0",
    "google-cloud-storage>=2.14.0",
    "pydantic>=2.10.0",
    "python-dotenv>=1.0.1",
    "requests>=2.31.0",
    "httpx>=0.26.0",
]

# Optional dependencies for enhanced functionality
[project.optional-dependencies]
rag = [
    "google-cloud-firestore>=2.16.0",
    "langchain>=0.1.0",
    "langchain-google-vertexai>=1.0.0",
    "langchain-community>=0.0.20",
]
database = [
    "sqlalchemy>=2.0.0",
    "psycopg2-binary>=2.9.9",
]
documents = [
    "pypdf2>=3.0.1",
    "python-multipart>=0.0.6",
    "markdown>=3.5.2",
]
development = [
    "pytest>=8.3.0",
    "pytest-asyncio>=0.26.0",
    "black>=25.1.0",
    "ruff>=0.1.0",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
]
deployment = [
    "gunicorn>=21.2.0",
    "uvicorn>=0.24.0",
    "docker>=7.0.0",
]

[project.urls]
Homepage = "https://github.com/immoassist/immoassist-agent"
Documentation = "https://docs.immoassist.de"
Repository = "https://github.com/immoassist/immoassist-agent"
"Bug Tracker" = "https://github.com/immoassist/immoassist-agent/issues"

[tool.poetry]
name = "immoassist-agent"
version = "1.0.0"
description = "AI agent for German real estate investment consulting"
authors = ["ImmoAssist Development Team <dev@immoassist.de>"]
license = "Apache-2.0"
readme = "README.md"
packages = [{include = "immoassist_agent"}]

[tool.poetry.dependencies]
python = "^3.11"
google-adk = "^1.5.0"
google-cloud-aiplatform = { version = "^1.93.0", extras = ["adk"] }
google-genai = "^1.9.0"
vertexai = "^1.93.0"
pydantic = "^2.10.0"
python-dotenv = "^1.0.1"
google-auth = "^2.20.0"
google-cloud-storage = "^2.14.0"
requests = "^2.31.0"
httpx = "^0.26.0"

# Optional RAG and vector database dependencies
google-cloud-firestore = { version = "^2.16.0", optional = true }
langchain = { version = "^0.1.0", optional = true }
langchain-google-vertexai = { version = "^1.0.0", optional = true }
langchain-community = { version = "^0.0.20", optional = true }

# Database integration dependencies
sqlalchemy = { version = "^2.0.0", optional = true }
psycopg2-binary = { version = "^2.9.9", optional = true }

# Document processing dependencies
pypdf2 = { version = "^3.0.1", optional = true }
python-multipart = { version = "^0.0.6", optional = true }
markdown = { version = "^3.5.2", optional = true }

[tool.poetry.extras]
rag = ["google-cloud-firestore", "langchain", "langchain-google-vertexai", "langchain-community"]
database = ["sqlalchemy", "psycopg2-binary"]
documents = ["pypdf2", "python-multipart", "markdown"]
all = ["google-cloud-firestore", "langchain", "langchain-google-vertexai", "langchain-community", "sqlalchemy", "psycopg2-binary", "pypdf2", "python-multipart", "markdown"]

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.0"
pytest-asyncio = "^0.26.0"
black = "^25.1.0"
ruff = "^0.1.0"
mypy = "^1.8.0"
pre-commit = "^3.6.0"
google-adk = { version = "^1.5.0", extras = ["eval"] }
jupyter = "^1.0.0"

[tool.poetry.group.deployment]
optional = true

[tool.poetry.group.deployment.dependencies]
gunicorn = "^21.2.0"
uvicorn = "^0.24.0"
docker = "^7.0.0"

# Build system configuration
[build-system]
requires = ["poetry-core>=1.8.0"]
build-backend = "poetry.core.masonry.api"

# Development tools configuration
[tool.black]
line-length = 88
target-version = ['py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
] 